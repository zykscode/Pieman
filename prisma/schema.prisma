generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String        @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             UserRole      @default(USER)
  archived         Boolean       @default(false)
  ratings          Rating[]
  transactions     Transaction[] @relation("UserAsBuyer")
  soldTransactions Transaction[] @relation("UserAsSeller")
  accounts         Account[]
  sessions         Session[]
  archivedts       DateTime?
  wallet           Wallet?
  failedAttempts   Int           @default(0)
  lockedUntil      DateTime?
  username         String?       @unique

  @@map(name: "users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model Wallet {
  id      String @id @default(cuid())
  userId  String @unique
  address String @unique
  balance Float  @default(0.0)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Transaction {
  id                String              @id @default(cuid())
  paymentId         String              @unique
  buyerId           String
  sellerId          String
  piAmount          Float
  nairaAmount       Float
  rate              Float
  description       String?
  status            TransactionStatus   @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expirationDate    DateTime?
  escrow            Escrow?
  escrowWalletId    String?
  escrowWallet      EscrowWallet?       @relation(fields: [escrowWalletId], references: [id])
  EscrowTransaction EscrowTransaction[]

  buyer  User @relation("UserAsBuyer", fields: [buyerId], references: [id])
  seller User @relation("UserAsSeller", fields: [sellerId], references: [id])

  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
}

model Escrow {
  id            String       @id @default(cuid())
  transaction   Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String       @unique
  amount        Float
  status        EscrowStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([transactionId])
}

model EscrowWallet {
  id                String              @id @default(cuid())
  address           String              @unique
  balance           Float               @default(0.0)
  transactions      Transaction[]
  EscrowTransaction EscrowTransaction[]
}

model EscrowTransaction {
  id                   String                  @id @default(cuid())
  escrowWalletId       String
  escrowWallet         EscrowWallet            @relation(fields: [escrowWalletId], references: [id], onDelete: Cascade)
  amount               Float
  type                 EscrowTransactionType
  status               EscrowTransactionStatus @default(PENDING)
  relatedTransactionId String?
  relatedTransaction   Transaction?            @relation(fields: [relatedTransactionId], references: [id], onDelete: SetNull)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt

  @@index([escrowWalletId])
  @@index([relatedTransactionId])
}

enum UserRole {
  USER
  ADMIN
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  REFUNDED
}

enum EscrowStatus {
  PENDING
  FUNDED
  RELEASED
  REFUNDED
}

enum EscrowTransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum EscrowTransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
