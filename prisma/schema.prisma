generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String        @unique
  emailVerified    DateTime? // Added this field
  password         String?
  image            String?
  role             UserRole      @default(USER)
  archived         Boolean       @default(false)
  ratings          Rating[]
  transactions     Transaction[] @relation("TransactionBuyer")
  soldTransactions Transaction[] @relation("TransactionSeller")
  accounts         Account[]
  sessions         Session[]
  wallet           Wallet?

  @@map(name: "users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model Wallet {
  id      String @id @default(cuid())
  userId  String @unique
  address String @unique
  balance Float  @default(0.0)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String            @id @default(cuid())
  buyer       User              @relation("TransactionBuyer", fields: [buyerId], references: [id])
  buyerId     String
  seller      User              @relation("TransactionSeller", fields: [sellerId], references: [id])
  sellerId    String
  piAmount    Float
  nairaAmount Float
  rate        Float
  description String?
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
}

enum UserRole {
  USER
  ADMIN
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  REFUNDED
}
